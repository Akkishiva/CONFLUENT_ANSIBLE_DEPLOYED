---
all:
  vars:
    ansible_connection: ssh
    ansible_user: root
    ansible_become: true
    ansible_ssh_private_key_file: /home/jenkins/one

    ssl_enabled: true
    ssl_mutual_auth_enabled: true

    # deployment_strategy: rolling
    #kafka_broker_custom_properties:
     # inter.broker.protocol.version: 3.4
     # log.message.format.version: 3.4

    # ssl_custom_certs: true
    ssl_ca_cert_filepath: "certs/ca.crt"
    ssl_signed_cert_filepath: "certs/kafka.crt"
    ssl_key_filepath: "certs/kafka.key"
    ssl_key_password: ""
    regenerate_keystore_and_truststore: true

    kafka_broker_schema_validation_enabled: true

    kafka_broker_custom_listeners:
    #  broker:
    #    name: BROKER
    #    port: 9091
    #    ssl_enabled: true
    #    ssl_mutual_auth_enabled: true
    #    sasl_protocol: none
      #   ## broker listener settings as desired
    #  internal:
    #    name: INTERNAL
        # port: 9092
        # ssl_enabled: true
        # ssl_mutual_auth_enabled: false
        # sasl_protocol: oauthbearer
      #   ## internal listener settings as desired
      client:
        name: CLIENT
        port: 9093
        ssl_enabled: true
        ssl_mutual_auth_enabled: false
        sasl_protocol: plain

    jmxexporter_enabled: true
    rbac_enabled: true

    ## LDAP Users
    mds_super_user: mds
    mds_super_user_password: mds
    kafka_broker_ldap_user: mds
    kafka_broker_ldap_password: mds
    #schema_registry_ldap_user: schemaregistryUser
    #schema_registry_ldap_password: schemaregistryUser
    # kafka_connect_ldap_user: connectAdmin
    # kafka_connect_ldap_password: connectAdmin
    # ksql_ldap_user: <Your KSQL username in LDAP>
    # ksql_ldap_password: <Your KSQL user's password in LDAP>
    # kafka_rest_ldap_user: <Your REST Proxy's username in LDAP>
    # kafka_rest_ldap_password: <Your REST Proxy's password in LDAP>
    control_center_ldap_user: controlcenterAdmin
    control_center_ldap_password: controlcenterAdmin

    rbac_component_additional_system_admins:
      - User:superUser
      - User:alice

    create_mds_certs: true
    # token_services_public_pem_file: /home/ashwin/Training/certs/public.pem
    # token_services_private_pem_file: /home/ashwin/Training/certs/private.pem

    ## confluent_license: <license-token>

    ## Set Component custom properties if any
    zookeeper_custom_properties:
      initLimit: 6
      syncLimit: 4
      ssl.quorum.hostnameVerification: false
      # ssl.hostnameVerification: false
    kafka_broker_custom_properties:
      num.io.threads: 15
      offsets.topic.num.partitions: 1
      offsets.topic.replication.factor: 3
      confluent.balancer.enable: true
    #  ssl.endpoint.identification.algorithm: 
    #  zookeeper.ssl.endpoint.identification.algorithm: 
    #  kafka.rest.client.ssl.endpoint.identification.algorithm: 
    #  confluent.ssl.endpoint.identification.algorithm: 
    #  confluent.metrics.reporter.ssl.endpoint.identification.algorithm: 
    #  confluent.metadata.server.ssl.endpoint.identification.algorithm: 
    #  kafka.rest.confluent.metadata.ssl.endpoint.identification.algorithm: 
    #  listener.name.broker.ssl.endpoint.identification.algorithm: 
    #   confluent.license: "{{ confluent_license }}"
    # schema_registry_custom_properties:
    #   confluent.metadata.ssl.endpoint.identification.algorithm: 
    #   kafkastore.ssl.endpoint.identification.algorithm: 
    #   ssl.endpoint.identification.algorithm: 
    # #   confluent.license: "{{ confluent_license }}"
    # kafka_connect_custom_properties:
    #   value.converter.schema.registry.ssl.endpoint.identification.algorithm: 
    #   ssl.endpoint.identification.algorithm: 
    #   producer.ssl.endpoint.identification.algorithm: 
    #   producer.confluent.monitoring.interceptor.ssl.endpoint.identification.algorithm: 
    #   listeners.https.ssl.endpoint.identification.algorithm: 
    #   key.converter.schema.registry.ssl.endpoint.identification.algorithm: 
    #   consumer.ssl.endpoint.identification.algorithm: 
    #   consumer.confluent.monitoring.interceptor.ssl.endpoint.identification.algorithm: 
    #   confluent.metadata.ssl.endpoint.identification.algorithm: 
    #   config.providers.secret.param.kafkastore.ssl.endpoint.identification.algorithm: 
    # #   confluent.license: "{{ confluent_license }}"
    # control_center_custom_properties:
    #   confluent.controlcenter.rest.ssl.endpoint.identification.algorithm: 
    #   confluent.controlcenter.streams.ssl.endpoint.identification.algorithm: 
    #   confluent.metadata.ssl.endpoint.identification.algorithm: 
    #   confluent.monitoring.interceptor.ssl.endpoint.identification.algorithm: 
    #   confluent.controlcenter.connect.connect-cluster.ssl.endpoint.identification.algorithm: 
    #   confluent.controlcenter.schema.registry.schema.registry.ssl.endpoint.identification.algorithm: 
    #   confluent.license: "{{ confluent_license }}"
    # kafka_rest_custom_properties:
    #   confluent.license: "{{ confluent_license }}"
    # ksql_custom_properties:
    #   confluent.license: "{{ confluent_license }}"

zookeeper:
  hosts:
    zookeeper:

kafka_broker:
  vars:
    kafka_broker_custom_properties:
      listener.name.client.plain.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required;
      listener.name.client.plain.sasl.server.callback.handler.class: io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler

      ssl.principal.mapping.rules: "RULE:.*CN=([a-zA-Z0-9_@]*),.*$/$1/L, DEFAULT"
     # listener.name.client.ssl.principal.mapping.rules: "RULE:CN=([a-zA-Z0-9_@]*),.*$/$1/L, DEFAULT"
     # listener.name.broker.ssl.principal.mapping.rules: "RULE:CN=([a-zA-Z0-9_@]*),.*$/$1/L, DEFAULT"
     # listener.name.internal.ssl.principal.mapping.rules: "RULE:CN=([a-zA-Z0-9_@]*),.*$/$1/L, DEFAULT"

      # ldap.ssl.truststore.location: /var/path/kafka_broker.truststore.jks
      # ldap.ssl.truststore.password: my-truststore-password
      # ldap.java.naming.security.protocol: SSL
      ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
      ldap.com.sun.jndi.ldap.read.timeout: 3000
      ldap.java.naming.provider.url: ldap://openldap:389
      ldap.java.naming.security.principal: cn=admin,dc=confluentdemo,dc=io
      ldap.java.naming.security.credentials: admin
      ldap.java.naming.security.authentication: simple
      ldap.search.mode: USERS
      # adjust to meet the directory settings
      ldap.user.search.base: ou=users,dc=confluentdemo,dc=io
      ldap.user.object.class: inetOrgPerson
      ldap.user.name.attribute: uid
      ldap.user.memberof.attribute: memberOf
      ldap.user.search.filter: (objectClass=inetOrgPerson)
      ldap.user.search.scope: 2
      ldap.search.page.size: 1000
      # ldap.group.search.base: ou=users,dc=confluentdemo,dc=io
      # ldap.group.object.class: posixGroup
      # ldap.group.name.attribute: cn
      # ldap.group.member.attribute: memberuid
      # ldap.group.member.attribute.pattern: cn=(.*),ou=users,dc=confluentdemo,dc=io
      # ldap.group.search.scope: 2
      
  hosts:
    kafka:

#schema_registry:
#  hosts:
#    schema-registry:

control_center:
  hosts:
    controlcenter: